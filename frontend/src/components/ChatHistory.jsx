import React, { useRef, useEffect, useState } from 'react';
import Message from './Message';
import ChatLoadingMessage from './ChatLoadingMessage';
import MessageLoading from './MessageLoading';
import { useEnhancedChat } from '../contexts/EnhancedChatContext';

const ChatHistory = ({ messages, isLoading, onDownload, loadingSessionId, selectedSessionId }) => {
  const containerRef = useRef(null);
  const bottomRef = useRef(null);
  const [showScrollToBottom, setShowScrollToBottom] = useState(false);
  const { isEnhancedProcessing, chatMode } = useEnhancedChat();

  // T·ª± ƒë·ªông scroll xu·ªëng cu·ªëi khi c√≥ tin nh·∫Øn m·ªõi
  useEffect(() => {
    if (bottomRef.current) {
      bottomRef.current.scrollIntoView({ behavior: 'smooth' });
    }
  }, [messages]);

  // Theo d√µi scroll ƒë·ªÉ hi·ªán n√∫t quay v·ªÅ cu·ªëi
  useEffect(() => {
    const handleScroll = () => {
      if (!containerRef.current) return;
      const { scrollTop, scrollHeight, clientHeight } = containerRef.current;
      // N·∫øu user scroll l√™n tr√™n qu√° 200px so v·ªõi ƒë√°y th√¨ hi·ªán n√∫t
      setShowScrollToBottom(scrollHeight - scrollTop - clientHeight > 200);
    };
    const ref = containerRef.current;
    if (ref) {
      ref.addEventListener('scroll', handleScroll);
    }
    return () => {
      if (ref) ref.removeEventListener('scroll', handleScroll);
    };
  }, []);

  const handleScrollToBottom = () => {
    if (bottomRef.current) {
      bottomRef.current.scrollIntoView({ behavior: 'smooth' });
    }
  };

  // Loading khi chuy·ªÉn session
  if ((isLoading || loadingSessionId === selectedSessionId) && messages.length === 0) {
    return <MessageLoading />;
  }

  if (!messages || messages.length === 0) {
    return (
      <div className="flex-1 flex items-center justify-center text-gray-400 my-10">
        Ch∆∞a c√≥ tin nh·∫Øn n√†o trong cu·ªôc tr√≤ chuy·ªán n√†y.
      </div>
    );
  }

  // Debug log ƒë·ªÉ ki·ªÉm tra d·ªØ li·ªáu
  console.log('Raw messages from API:', messages);

  // Ki·ªÉm tra n·∫øu messages ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω t·ª´ ChatSessionContext
  const isProcessedMessages = messages.length > 0 && messages[0].sender !== undefined;

  let processedMessages;
  
  if (isProcessedMessages) {
    // Messages ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω trong ChatSessionContext, ch·ªâ c·∫ßn format l·∫°i
    processedMessages = messages.map((msg, idx) => ({
      id: msg.id || idx,
      sender: msg.sender,
      text: msg.text,
      timestamp: msg.timestamp,
      agentic: msg.agentic,
      isFailed: msg.sender === 'bot' && (msg.text.includes('‚ùå') || msg.text.includes('X·ª≠ l√Ω th·∫•t b·∫°i')),
      isCompleted: msg.sender === 'bot' && (msg.text.includes('‚úÖ') || msg.text.includes('ƒê√£ ho√†n th√†nh')),
      error_message: null
    }));
  } 
  // else {
  //   // Messages ch∆∞a ƒë∆∞·ª£c x·ª≠ l√Ω, x·ª≠ l√Ω nh∆∞ logic c≈©
  //   processedMessages = messages.map((msg, idx) => {
  //     const isUser = msg.message_type === 'user';
      
  //     // X·ª≠ l√Ω n·ªôi dung tin nh·∫Øn
  //     let messageText = '';
  //     if (isUser) {
  //       messageText = msg.user_request || '';
  //     } else {
  //       // Tin nh·∫Øn t·ª´ assistant - ∆∞u ti√™n theo th·ª© t·ª±:
  //       // 1. response (n·∫øu c√≥ v√† kh√¥ng null)
  //       // 2. execution_results summary ho·∫∑c chain_of_thought
  //       // 3. fallback message
        
  //       if (msg.response && msg.response.trim() && msg.response !== 'null') {
  //         messageText = msg.response;
  //       } else if (msg.execution_results?.summary) {
  //         // T·∫°o summary t·ª´ execution_results
  //         const summary = msg.execution_results.summary;
  //         const steps = summary.total_steps_completed || 0;
  //         const filesProcessed = summary.files_processed || 0;
          
  //         messageText = msg.text
          
  //         // Th√™m th√¥ng tin chi ti·∫øt c√°c action
  //         if (summary.actions_performed && summary.actions_performed.length > 0) {
  //           messageText += '\n\nüîß **C√°c h√†nh ƒë·ªông ƒë√£ th·ª±c hi·ªán:**\n';
  //           summary.actions_performed.forEach((action, index) => {
  //             messageText += `  ‚Ä¢ ${action.description}: ${action.status === 'success' ? '‚úÖ Th√†nh c√¥ng' : '‚ùå Th·∫•t b·∫°i'}\n`;
  //           });
  //         }
          
  //         // Th√™m chain of thought n·∫øu c√≥
  //         if (msg.execution_results.chain_of_thought) {
  //           messageText += `\n\nüß† **Qu√° tr√¨nh suy nghƒ©:**\n${msg.execution_results.chain_of_thought}`;
  //         }
  //       } else if (msg.execution_results?.chain_of_thought) {
  //         messageText = `üß† **Qu√° tr√¨nh x·ª≠ l√Ω:**\n${msg.execution_results.chain_of_thought}`;
  //       } else if (msg.summary) {
  //         messageText = msg.summary;
  //       } else if (msg.status === 'failed') {
  //         messageText = msg.text
  //       } else if (msg.status === 'completed') {
  //         messageText = msg.text
  //       } else {
  //         messageText = msg.text 
  //       }
  //     }

  //     // X·ª≠ l√Ω timestamp - ∆∞u ti√™n completed_at cho tin nh·∫Øn bot
  //     const timestamp = isUser ? msg.created_at : (msg.completed_at || msg.created_at);

  //     // X·ª≠ l√Ω tr·∫°ng th√°i
  //     const isFailed = msg.status === 'failed';
  //     const isCompleted = msg.status === 'completed';

  //     return {
  //       id: msg.id || idx,
  //       sender: isUser ? 'user' : 'bot',
  //       text: messageText,
  //       timestamp: timestamp,
  //       status: msg.status,
  //       isFailed: isFailed,
  //       isCompleted: isCompleted,
  //       // D·ªØ li·ªáu agentic n·∫øu c√≥
  //       agentic: (msg.execution_results || msg.plan || msg.summary) ? {
  //         execution_results: msg.execution_results,
  //         plan: msg.plan,
  //         summary: msg.summary,
  //         user_request: msg.user_request,
  //         response: msg.response
  //       } : null,
  //       // Th√¥ng tin l·ªói n·∫øu c√≥
  //       error_message: msg.error_message,
  //       // Th√¥ng tin th·ªùi gian
  //       created_at: msg.created_at,
  //       completed_at: msg.completed_at
  //     };
  //   });
  // }

  console.log('Processed messages:', processedMessages);

  return (
    <div className="relative h-full">
      <div
        ref={containerRef}
        className="flex-1 overflow-y-auto px-4 py-2 space-y-2 max-h-[calc(100vh-220px)]"
        style={{ height: '100%' }}
      >
        {processedMessages.map((msg, idx) => (
          <Message 
            key={msg.id || idx} 
            message={{
              ...msg,
              sender: msg.sender,
              text: msg.text,
              timestamp: msg.timestamp,
              agentic: msg.agentic,
              isFailed: msg.isFailed,
              isCompleted: msg.isCompleted,
              error_message: msg.error_message
            }}
            onDownload={onDownload} 
            className={`
              font-sans
              ${msg.sender === 'user' ? 'text-base font-medium text-blue-900' : 'text-base font-semibold text-gray-900'}
              leading-relaxed
            `}
          />
        ))}
        <div ref={bottomRef} />
      </div>
      {showScrollToBottom && (
        <button
          onClick={handleScrollToBottom}
          className="absolute right-6 bottom-8 z-10 bg-blue-500 text-white px-4 py-2 rounded-full shadow-lg hover:bg-blue-600 transition-all"
        >
          Quay v·ªÅ tin nh·∫Øn m·ªõi nh·∫•t
        </button>
      )}
    </div>
  );
};

export default ChatHistory;