#!/usr/bin/env python3
"""
Script ki·ªÉm tra Swagger documentation trong c√°c controller
"""

import os
import re
from pathlib import Path

def check_swagger_docs():
    """Ki·ªÉm tra Swagger documentation trong t·∫•t c·∫£ c√°c controller"""
    
    controllers_dir = Path("src/controllers")
    issues = []
    documented_endpoints = []
    undocumented_endpoints = []
    
    # C√°c file controller c·∫ßn ki·ªÉm tra
    controller_files = [
        "auth_controller.py",
        "chat_controller.py", 
        "admin_controller.py",
        "file_controller.py",
        "search_controller.py",
        "system_controller.py",
        "enhanced_chat_controller.py",
        "agentic_ai_controller.py",
        "feedback.py",
        "public_chat_controller.py"
    ]
    
    print("=== KI·ªÇM TRA SWAGGER DOCUMENTATION ===\n")
    
    for filename in controller_files:
        filepath = controllers_dir / filename
        if not filepath.exists():
            issues.append(f"‚ùå File kh√¥ng t·ªìn t·∫°i: {filename}")
            continue
            
        print(f"üìÅ Ki·ªÉm tra: {filename}")
        
        with open(filepath, 'r', encoding='utf-8') as f:
            content = f.read()
            
        # T√¨m t·∫•t c·∫£ c√°c route decorators
        route_pattern = r'@\w+\.route\([\'"]([^\'"]+)[\'"][^)]*\)'
        routes = re.findall(route_pattern, content)
        
        # T√¨m t·∫•t c·∫£ c√°c docstrings c√≥ Swagger
        swagger_pattern = r'"""[^"]*---[^"]*tags:[^"]*"""'
        swagger_docs = re.findall(swagger_pattern, content, re.DOTALL)
        
        print(f"   üìä T√¨m th·∫•y {len(routes)} routes")
        print(f"   üìù T√¨m th·∫•y {len(swagger_docs)} Swagger docs")
        
        # Ki·ªÉm tra t·ª´ng route
        for route in routes:
            # T√¨m docstring cho route n√†y
            route_with_docs = False
            for doc in swagger_docs:
                if 'tags:' in doc and 'responses:' in doc:
                    route_with_docs = True
                    break
                    
            if route_with_docs:
                documented_endpoints.append(f"{filename}: {route}")
            else:
                undocumented_endpoints.append(f"{filename}: {route}")
                
        # Ki·ªÉm tra c√°c v·∫•n ƒë·ªÅ c·ª• th·ªÉ
        if len(routes) > len(swagger_docs):
            issues.append(f"‚ö†Ô∏è  {filename}: Thi·∫øu Swagger docs cho m·ªôt s·ªë endpoints")
            
        if 'security:' not in content and 'Bearer:' not in content:
            issues.append(f"‚ö†Ô∏è  {filename}: Thi·∫øu security definitions")
            
        if 'examples:' not in content:
            issues.append(f"‚ö†Ô∏è  {filename}: Thi·∫øu response examples")
            
        print()
    
    # B√°o c√°o t·ªïng k·∫øt
    print("=== B√ÅO C√ÅO T·ªîNG K·∫æT ===\n")
    
    print(f"‚úÖ Endpoints c√≥ documentation: {len(documented_endpoints)}")
    for endpoint in documented_endpoints:
        print(f"   ‚úì {endpoint}")
        
    print(f"\n‚ùå Endpoints thi·∫øu documentation: {len(undocumented_endpoints)}")
    for endpoint in undocumented_endpoints:
        print(f"   ‚úó {endpoint}")
        
    print(f"\n‚ö†Ô∏è  V·∫•n ƒë·ªÅ c·∫ßn kh·∫Øc ph·ª•c: {len(issues)}")
    for issue in issues:
        print(f"   {issue}")
        
    # ƒê·ªÅ xu·∫•t c·∫£i thi·ªán
    print("\n=== ƒê·ªÄ XU·∫§T C·∫¢I THI·ªÜN ===\n")
    
    if issues:
        print("1. Th√™m Swagger documentation cho c√°c endpoints c√≤n thi·∫øu")
        print("2. Th√™m security definitions cho t·∫•t c·∫£ protected endpoints")
        print("3. Th√™m response examples cho t·∫•t c·∫£ endpoints")
        print("4. Ki·ªÉm tra v√† c·∫≠p nh·∫≠t tags cho ph√π h·ª£p")
        print("5. Th√™m error response schemas")
    else:
        print("‚úÖ T·∫•t c·∫£ endpoints ƒë√£ c√≥ documentation ƒë·∫ßy ƒë·ªß!")
        
    print("\n=== TAGS HI·ªÜN T·∫†I ===\n")
    tags = [
        "Auth", "Chat", "Admin", "File", "Search", 
        "System", "Enhanced Chat", "Agentic AI", "Feedback"
    ]
    
    for tag in tags:
        print(f"   ‚Ä¢ {tag}")
        
    return len(issues) == 0

if __name__ == "__main__":
    success = check_swagger_docs()
    exit(0 if success else 1) 