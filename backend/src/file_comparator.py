"""
Module so s√°nh n·ªôi dung file
"""
import os
import difflib
from typing import List, Dict, Any
from src.file_manager import file_manager
from src.llm import llm_manager
import re

class FileComparator:
    
    def compare_files(self, file_ids: List[str], comparison_type: str = "content") -> Dict[str, Any]:
        """
        So s√°nh nhi·ªÅu file v·ªõi nhau
        
        Args:
            file_ids: Danh s√°ch ID c·ªßa c√°c file c·∫ßn so s√°nh
            comparison_type: Lo·∫°i so s√°nh ("content", "metadata", "summary")
        
        Returns:
            K·∫øt qu·∫£ so s√°nh
        """
        if len(file_ids) < 2:
            return {
                "success": False,
                "error": "C·∫ßn √≠t nh·∫•t 2 file ƒë·ªÉ so s√°nh"
            }
        
        # L·∫•y th√¥ng tin v√† n·ªôi dung c√°c file
        files_data = []
        for file_id in file_ids:
            file_info = file_manager.get_file_by_id(file_id)
            if not file_info:
                continue
                
            # ƒê·ªçc n·ªôi dung file
            content = self._read_file_content(file_info['file_path'])
            files_data.append({
                'id': file_id,
                'name': file_info['original_name'],
                'content': content,
                'metadata': {
                    'size': file_info['file_size'],
                    'type': file_info['file_type'],
                    'uploaded_at': file_info['uploaded_at']
                }
            })
        
        if len(files_data) < 2:
            return {
                "success": False,
                "error": "Kh√¥ng th·ªÉ ƒë·ªçc ƒë∆∞·ª£c n·ªôi dung file"
            }
        
        # Th·ª±c hi·ªán so s√°nh theo lo·∫°i
        if comparison_type == "content":
            return self._compare_content(files_data)
        elif comparison_type == "metadata":
            return self._compare_metadata(files_data)
        elif comparison_type == "summary":
            return self._compare_with_ai_summary(files_data)
        else:
            return self._compare_content(files_data)
    
    def _read_file_content(self, file_path: str) -> str:
        """ƒê·ªçc n·ªôi dung file"""
        try:
            if not os.path.exists(file_path):
                return ""
            
            # H·ªó tr·ª£ c√°c lo·∫°i file text
            with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                return f.read()
        except Exception as e:
            print(f"Error reading file {file_path}: {e}")
            return ""
    
    def _compare_content(self, files_data: List[Dict]) -> Dict[str, Any]:
        """So s√°nh n·ªôi dung raw c·ªßa c√°c file"""
        comparison_results = []
        
        # So s√°nh t·ª´ng c·∫∑p file
        for i in range(len(files_data)):
            for j in range(i + 1, len(files_data)):
                file1 = files_data[i]
                file2 = files_data[j]
                
                # T√≠nh ƒë·ªô t∆∞∆°ng ƒë·ªìng
                similarity = self._calculate_similarity(file1['content'], file2['content'])
                
                # T√¨m kh√°c bi·ªát
                differences = list(difflib.unified_diff(
                    file1['content'].splitlines(keepends=True),
                    file2['content'].splitlines(keepends=True),
                    fromfile=file1['name'],
                    tofile=file2['name'],
                    n=3
                ))
                
                comparison_results.append({
                    'file1': {
                        'id': file1['id'],
                        'name': file1['name']
                    },
                    'file2': {
                        'id': file2['id'],
                        'name': file2['name']
                    },
                    'similarity_score': similarity,
                    'differences_count': len([d for d in differences if d.startswith(('+', '-')) and not d.startswith(('+++', '---'))]),
                    'differences_preview': differences[:10] if differences else []
                })
        
        return {
            "success": True,
            "comparison_type": "content",
            "files_compared": len(files_data),
            "comparisons": comparison_results
        }
    
    def _compare_metadata(self, files_data: List[Dict]) -> Dict[str, Any]:
        """So s√°nh metadata c·ªßa c√°c file"""
        metadata_comparison = []
        
        for i in range(len(files_data)):
            for j in range(i + 1, len(files_data)):
                file1 = files_data[i]
                file2 = files_data[j]
                
                size_diff = abs(file1['metadata']['size'] - file2['metadata']['size'])
                size_diff_percent = (size_diff / max(file1['metadata']['size'], file2['metadata']['size'])) * 100 if max(file1['metadata']['size'], file2['metadata']['size']) > 0 else 0
                
                metadata_comparison.append({
                    'file1': {
                        'id': file1['id'],
                        'name': file1['name'],
                        'size': file1['metadata']['size'],
                        'type': file1['metadata']['type']
                    },
                    'file2': {
                        'id': file2['id'],
                        'name': file2['name'],
                        'size': file2['metadata']['size'],
                        'type': file2['metadata']['type']
                    },
                    'size_difference': size_diff,
                    'size_difference_percent': round(size_diff_percent, 2),
                    'same_type': file1['metadata']['type'] == file2['metadata']['type']
                })
        
        return {
            "success": True,
            "comparison_type": "metadata",
            "files_compared": len(files_data),
            "comparisons": metadata_comparison        }
    
    def _compare_with_ai_summary(self, files_data: List[Dict]) -> Dict[str, Any]:
        """S·ª≠ d·ª•ng AI ƒë·ªÉ so s√°nh v√† t√≥m t·∫Øt s·ª± kh√°c bi·ªát"""
        try:
            # R√∫t tr√≠ch th√¥ng tin quan tr·ªçng t·ª´ m·ªói file
            extracted_info = []
            for file_data in files_data:
                file_info = self._extract_key_information(file_data)
                extracted_info.append(file_info)
            
            # T·∫°o prompt chi ti·∫øt ƒë·ªÉ so s√°nh
            files_analysis = []
            for i, info in enumerate(extracted_info):
                files_analysis.append(f"""
FILE {i+1}: {info['name']}
- Lo·∫°i: {info['type']}
- K√≠ch th∆∞·ªõc: {info['size']} bytes
- Th√¥ng tin ch√≠nh: {info['key_info']}
- N·ªôi dung ch√≠nh: {info['main_content']}
- S·ªë li·ªáu quan tr·ªçng: {info['numbers']}
- T·ª´ kh√≥a: {', '.join(info['keywords'])}
""")
            
            prompt = f"""
B·∫°n l√† chuy√™n gia ph√¢n t√≠ch t√†i li·ªáu. H√£y so s√°nh chi ti·∫øt c√°c file sau:

{chr(10).join(files_analysis)}

H√£y ph√¢n t√≠ch m·ªôt c√°ch chi ti·∫øt v√† c√≥ c·∫•u tr√∫c:

## üìä TH√îNG TIN T·ªîNG QUAN
- S·ªë l∆∞·ª£ng file: {len(files_data)}
- Lo·∫°i file: [li·ªát k√™ c√°c lo·∫°i]

## üîç PH√ÇN T√çCH CHI TI·∫æT

### 1. ƒêI·ªÇM GI·ªêNG NHAU
- [Li·ªát k√™ c√°c ƒëi·ªÉm t∆∞∆°ng ƒë·ªìng v·ªÅ n·ªôi dung, c·∫•u tr√∫c, m·ª•c ƒë√≠ch]

### 2. ƒêI·ªÇM KH√ÅC BI·ªÜT CH√çNH
- [So s√°nh chi ti·∫øt c√°c kh√°c bi·ªát quan tr·ªçng]
- [Ph√¢n t√≠ch s·ªë li·ªáu n·∫øu c√≥]

### 3. XU H∆Ø·ªöNG & THAY ƒê·ªîI
- [N·∫øu c√≥ th·ªÉ x√°c ƒë·ªãnh ƒë∆∞·ª£c th·ªùi gian, ph√¢n t√≠ch xu h∆∞·ªõng]
- [C√°c thay ƒë·ªïi ƒë√°ng ch√∫ √Ω]

### 4. ƒê√ÅNH GI√Å & K·∫æT LU·∫¨N
- [T·ªïng k·∫øt √Ω nghƒ©a c·ªßa s·ª± kh√°c bi·ªát]
- [Khuy·∫øn ngh·ªã ho·∫∑c nh·∫≠n x√©t]

Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, chi ti·∫øt v√† c√≥ c·∫•u tr√∫c r√µ r√†ng.
"""

            ai_comparison = llm_manager.generate_response(prompt)
            
            return {
                "success": True,
                "comparison_type": "ai_summary",
                "files_compared": len(files_data),
                "ai_analysis": ai_comparison,
                "extracted_info": extracted_info,
                "files": [{'id': f['id'], 'name': f['name'], 'size': f['metadata']['size']} for f in files_data]
            }
            
        except Exception as e:
            print(f"Error in AI comparison: {e}")
            return {
                "success": False,
                "error": "Kh√¥ng th·ªÉ th·ª±c hi·ªán so s√°nh b·∫±ng AI"
            }
    
    def _extract_key_information(self, file_data: Dict) -> Dict[str, Any]:
        """R√∫t tr√≠ch th√¥ng tin quan tr·ªçng t·ª´ file"""
        content = file_data['content']
        name = file_data['name']
        
        # R√∫t tr√≠ch s·ªë li·ªáu
        numbers = re.findall(r'\d{1,3}(?:,\d{3})*(?:\.\d+)?', content)
        
        # R√∫t tr√≠ch t·ª´ kh√≥a quan tr·ªçng
        keywords = self._extract_keywords(content)
        
        # L·∫•y ph·∫ßn n·ªôi dung ch√≠nh (1000 k√Ω t·ª± ƒë·∫ßu)
        main_content = content[:1000] + "..." if len(content) > 1000 else content
        
        # T√≥m t·∫Øt th√¥ng tin ch√≠nh b·∫±ng AI
        key_info_prompt = f"""
T√≥m t·∫Øt n·ªôi dung ch√≠nh c·ªßa file "{name}" trong 2-3 c√¢u:

{main_content}

Ch·ªâ tr·∫£ l·ªùi n·ªôi dung t√≥m t·∫Øt, kh√¥ng c·∫ßn gi·∫£i th√≠ch th√™m.
"""
        
        try:
            key_info = llm_manager.generate_response(key_info_prompt)
        except:
            key_info = "Kh√¥ng th·ªÉ t√≥m t·∫Øt n·ªôi dung"
        
        return {
            'name': name,
            'type': file_data['metadata']['type'],
            'size': file_data['metadata']['size'],
            'key_info': key_info,
            'main_content': main_content,
            'numbers': numbers[:10],  # L·∫•y 10 s·ªë ƒë·∫ßu ti√™n
            'keywords': keywords[:15]  # L·∫•y 15 t·ª´ kh√≥a ƒë·∫ßu ti√™n
        }
    
    def _extract_keywords(self, content: str) -> List[str]:
        """R√∫t tr√≠ch t·ª´ kh√≥a quan tr·ªçng t·ª´ n·ªôi dung"""
        # Lo·∫°i b·ªè c√°c t·ª´ ph·ªï bi·∫øn
        stop_words = {'v√†', 'c·ªßa', 'l√†', 'c√≥', 'ƒë∆∞·ª£c', 'cho', 'v·ªõi', 't·ª´', 'v·ªÅ', 
                     'trong', 'ƒë·ªÉ', 'n√†y', 'ƒë√≥', 'c√°c', 'm·ªôt', 'nh·ªØng', 'nh∆∞', 
                     's·∫Ω', 'ƒë√£', 'th√¨', 'c≈©ng', 'c√≤n', 'kh√¥ng', 'theo', 'l·∫°i'}
        
        # T√°ch t·ª´ v√† l·ªçc
        words = re.findall(r'\b[a-zA-Z√Ä-·ªπ]{3,}\b', content.lower())
        keywords = [word for word in words if word not in stop_words]
        
        # ƒê·∫øm t·∫ßn su·∫•t v√† l·∫•y c√°c t·ª´ ph·ªï bi·∫øn
        word_count = {}
        for word in keywords:
            word_count[word] = word_count.get(word, 0) + 1
        
        # S·∫Øp x·∫øp theo t·∫ßn su·∫•t v√† l·∫•y top keywords
        sorted_words = sorted(word_count.items(), key=lambda x: x[1], reverse=True)
        return [word for word, count in sorted_words if count > 1][:15]
    
    def _calculate_similarity(self, text1: str, text2: str) -> float:
        """T√≠nh ƒë·ªô t∆∞∆°ng ƒë·ªìng gi·ªØa 2 ƒëo·∫°n text"""
        try:
            # S·ª≠ d·ª•ng SequenceMatcher ƒë·ªÉ t√≠nh similarity
            similarity = difflib.SequenceMatcher(None, text1, text2).ratio()
            return round(similarity * 100, 2)
        except Exception:
            return 0.0
    
    def find_files_for_comparison(self, query: str, user_id: str, user_role: str) -> List[Dict[str, Any]]:
        """
        T√¨m file d√†nh cho so s√°nh d·ª±a tr√™n query
        V√≠ d·ª•: "so s√°nh budget 2024 v√† 2025" -> t√¨m file c√≥ ch·ª©a "budget 2024" v√† "budget 2025"
        """
        from src.file_search import file_search_engine
        
        # T√°ch c√°c t·ª´ kh√≥a t·ª´ query
        keywords = self._extract_comparison_keywords(query)
        
        if len(keywords) < 2:
            # N·∫øu kh√¥ng t√°ch ƒë∆∞·ª£c, t√¨m chung v·ªõi query g·ªëc
            search_results = file_search_engine.search_all(query, user_id, user_role)
            return search_results.get('results', [])[:5]  # L·∫•y t·ªëi ƒëa 5 file
        
        # T√¨m file cho t·ª´ng keyword
        all_files = []
        for keyword in keywords:
            search_results = file_search_engine.search_all(keyword, user_id, user_role)
            all_files.extend(search_results.get('results', []))
        
        # Lo·∫°i b·ªè tr√πng l·∫∑p
        seen_ids = set()
        unique_files = []
        for file in all_files:
            if file['id'] not in seen_ids:
                seen_ids.add(file['id'])
                unique_files.append(file)
        
        # S·∫Øp x·∫øp theo ƒë·ªô ph√π h·ª£p
        unique_files.sort(key=lambda x: x.get('match_score', 0), reverse=True)
        
        return unique_files[:5]  # L·∫•y t·ªëi ƒëa 5 file
    
    def _extract_comparison_keywords(self, query: str) -> List[str]:
        """
        Tr√≠ch xu·∫•t c√°c t·ª´ kh√≥a ƒë·ªÉ so s√°nh t·ª´ query
        V√≠ d·ª•: "so s√°nh budget 2024 v√† 2025" -> ["budget 2024", "budget 2025"]
        """
        # Lo·∫°i b·ªè t·ª´ "so s√°nh"
        clean_query = re.sub(r'\b(so s√°nh|compare|vs|versus)\b', '', query, flags=re.IGNORECASE).strip()
        
        # T√°ch theo "v√†", "vs", "v·ªõi"
        keywords = re.split(r'\b(v√†|vs|versus|v·ªõi|,)\b', clean_query, flags=re.IGNORECASE)
        
        # L√†m s·∫°ch v√† lo·∫°i b·ªè t·ª´ k·∫øt n·ªëi
        result = []
        for keyword in keywords:
            keyword = keyword.strip()
            if keyword and keyword.lower() not in ['v√†', 'vs', 'versus', 'v·ªõi', ',']:
                result.append(keyword)
        
        return result[:5]  # T·ªëi ƒëa 5 keyword


# Kh·ªüi t·∫°o instance global
file_comparator = FileComparator()
